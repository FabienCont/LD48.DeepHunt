{"version":3,"sources":["webpack:///./sources/game/scripts/snippets/aJam/handle-hitbox.js"],"names":["collisionsSorter","collisionA","collisionB","nbDirectionA","minA","Infinity","nbDirectionB","minB","Object","values","delta","map","i","entity","collides","bottom","top","left","right","sort","forEach","collision","direction","from","entry","entries","find","findDirection","states","get","grounded","y","x"],"mappings":"oiCAAA,IAOMA,EAAmB,cAA4D,aAAjDC,EAAiD,qBAAxBC,EAAwB,KAC/EC,GAD+E,KAChE,GACfC,EAAOC,IAEPC,EAAe,EACfC,EAAOF,IAiBX,OAhBAG,OAAOC,OAAOR,EAAWS,OAAOC,KAAI,SAACF,EAAQG,GACvCH,EAAS,IACXN,GAAgB,EACZM,EAASL,IACXA,EAAOK,OAIbD,OAAOC,OAAOP,EAAWQ,OAAOC,KAAI,SAACF,EAAQG,GACvCH,EAAS,IACXH,GAAgB,EACZG,EAASF,IACXA,EAAOE,OAITL,EAAOG,GAASH,IAASG,GAAQJ,EAAeG,GAC1C,EACJC,EAAOH,GAASA,IAASG,GAAQD,EAAeH,EAC7C,EAEF,GAGM,SAAS,EAACU,EAAQC,GAC/B,IAAMJ,EAAQ,CACZK,OAAQ,EAAGC,IAAK,EAAGC,KAAM,EAAGC,MAAO,GAiBrC,GAdAJ,EAASK,KAAKnB,GAAkBoB,SAAQ,WAAuBR,GAAM,aAA3BS,EAA2B,KAE7DC,GAF6D,KA1CjD,SAAUC,GAC9B,IAAMC,EAAQhB,OAAOiB,QAAQF,GAAMG,MAAK,sCAA4B,IAA5B,QACxC,GAAIF,EACF,OAAOA,EAAM,GAyCKG,CADDN,EAATE,OAEU,WAAdD,GAA0BD,EAAUX,MAAMK,OAAS,GAAKL,EAAMK,OAASM,EAAUX,MAAMK,OACzFL,EAAMK,QAAUM,EAAUX,MAAMK,OAASL,EAAMK,OACxB,QAAdO,GAAuBD,EAAUX,MAAMM,IAAM,GAAKN,EAAMM,IAAMK,EAAUX,MAAMM,IACvFN,EAAMM,KAAOK,EAAUX,MAAMM,IAAMN,EAAMM,IAClB,SAAdM,GAAwBD,EAAUX,MAAMO,KAAO,GAAKP,EAAMO,KAAOI,EAAUX,MAAMO,KAC1FP,EAAMO,MAAQI,EAAUX,MAAMO,KAAOP,EAAMO,KACpB,UAAdK,GAAyBD,EAAUX,MAAMQ,MAAQ,GAAKR,EAAMQ,MAAQG,EAAUX,MAAMQ,QAC7FR,EAAMQ,OAASG,EAAUX,MAAMQ,MAAQR,EAAMQ,UAI7CR,EAAMK,OAAQ,CAChB,IAAMa,EAASf,EAAOgB,IAAI,UACtBD,GAAUA,EAAOnB,QAAUmB,EAAOnB,OAAOqB,WAC3CF,EAAOnB,OAAOqB,SAAW,QAE3BjB,EAAOgB,IAAI,YAAYE,GAAKrB,EAAMK,OAEhCL,EAAMM,MACRH,EAAOgB,IAAI,YAAYE,GAAKrB,EAAMM,KAEhCN,EAAMO,OACRJ,EAAOgB,IAAI,YAAYG,GAAKtB,EAAMO,MAEhCP,EAAMQ,QACRL,EAAOgB,IAAI,YAAYG,GAAKtB,EAAMQ","file":"5335_bundle.js","sourcesContent":["const findDirection = function (from) {\n  const entry = Object.entries(from).find(([key, value]) => value === true);\n  if (entry) {\n    return entry[0];\n  } // debugger;\n};\n\nconst collisionsSorter = function ([collisionA, colliderA], [collisionB, colliderB]) {\n  let nbDirectionA = 0;\n  let minA = Infinity;\n\n  let nbDirectionB = 0;\n  let minB = Infinity;\n  Object.values(collisionA.delta).map((values, i) => {\n    if (values > 0) {\n      nbDirectionA += 1;\n      if (values < minA) {\n        minA = values;\n      }\n    }\n  });\n  Object.values(collisionB.delta).map((values, i) => {\n    if (values > 0) {\n      nbDirectionB += 1;\n      if (values < minB) {\n        minB = values;\n      }\n    }\n  });\n  if (minA < minB || (minA === minB && nbDirectionA < nbDirectionB)) {\n    return -1;\n  } if (minB < minA || (minA === minB && nbDirectionB < nbDirectionA)) {\n    return 1;\n  }\n  return 0;\n};\n\nexport default function (entity, collides) {\n  const delta = {\n    bottom: 0, top: 0, left: 0, right: 0,\n  };\n\n  collides.sort(collisionsSorter).forEach(([collision, entityB], i) => {\n    const { from } = collision;\n    const direction = findDirection(from);\n    if (direction === 'bottom' && collision.delta.bottom > 0 && delta.bottom < collision.delta.bottom) {\n      delta.bottom += collision.delta.bottom - delta.bottom;\n    } else if (direction === 'top' && collision.delta.top > 0 && delta.top < collision.delta.top) {\n      delta.top += collision.delta.top - delta.top;\n    } else if (direction === 'left' && collision.delta.left > 0 && delta.left < collision.delta.left) {\n      delta.left += collision.delta.left - delta.left;\n    } else if (direction === 'right' && collision.delta.right > 0 && delta.right < collision.delta.right) {\n      delta.right += collision.delta.right - delta.right;\n    }\n  });\n\n  if (delta.bottom) {\n    const states = entity.get('states');\n    if (states && states.values && states.values.grounded) {\n      states.values.grounded = 'true';\n    }\n    entity.get('position').y -= delta.bottom;\n  }\n  if (delta.top) {\n    entity.get('position').y += delta.top;\n  }\n  if (delta.left) {\n    entity.get('position').x += delta.left;\n  }\n  if (delta.right) {\n    entity.get('position').x -= delta.right;\n  }\n}\n"],"sourceRoot":""}