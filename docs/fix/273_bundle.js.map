{"version":3,"sources":["webpack:///./sources/game/scripts/systems/canvas2d/renderImages.js"],"names":["getPattern","spriteName","this","$variables","cache","dicoPattern","savePattern","pattern","drawPattern","context","ratio","img","scale","offset","shift","sx","sy","sLargeur","sHauteur","dx","dy","dLargeur","dHauteur","savedPattern","call","temp","canvas","document","createElement","setAttribute","style","width","height","imageRendering","getContext","imageSmoothingEnabled","setTransform","drawImage","createPattern","fillStyle","translate","Math","abs","left","top","x","y","fillRect","renderImages","Object","values","$cameras","forEach","camera","images","getDico","sort","a","b","destination","z","screen","opacity","image","frame","source","rotate","isVisible","visible","opacityGlobal","alpha","globalAlpha","position","min","right","max","bottom","dstX","dstY","dstWidth","dstHeight","PI","cos"],"mappings":"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","file":"273_bundle.js","sourcesContent":["const getPattern = function getPattern(spriteName) {\n  if (this.$variables.cache && this.$variables.cache.dicoPattern) {\n    return this.$variables.cache.dicoPattern[spriteName] ? this.$variables.cache.dicoPattern[spriteName] : null;\n  }\n  return null;\n};\nconst savePattern = function savePattern(spriteName, pattern) {\n  if (this.$variables.cache) {\n    if (!this.$variables.cache.dicoPattern) {\n      this.$variables.cache.dicoPattern = {};\n    }\n    this.$variables.cache.dicoPattern[spriteName] = pattern;\n  }\n};\n\nconst createPattern = function createPattern(img, ratio, scale, offset, shift, sx, sy, sLargeur, sHauteur) {\n  const temp = {\n    canvas: document.createElement('canvas'),\n    // canvas: document.querySelector('.canvas-debug'),\n\n  };\n\n  temp.canvas.setAttribute('height', sHauteur * scale);\n  temp.canvas.setAttribute('width', sLargeur * scale);\n\n  temp.canvas.style.width = `${sLargeur * scale}+px`;\n  temp.canvas.style.height = `${sHauteur * scale}+px`;\n\n  temp.canvas.style.imageRendering = '-moz-crisp-edges';\n  temp.canvas.style.imageRendering = '-webkit-crisp-edges';\n  temp.canvas.style.imageRendering = 'crisp-edges';\n  temp.canvas.style.imageRendering = 'pixelated';\n  temp.context = temp.canvas.getContext('2d');\n  temp.context.imageSmoothingEnabled = false;\n  temp.context.setTransform(1, 0, 0, 1, 0, 0);\n\n  const dx = (sLargeur * scale);\n  const dy = (sHauteur * scale);\n  if (temp.canvas.width > 0 && temp.canvas.height > 0) {\n    temp.context.drawImage(img, sx, sy, sLargeur, sHauteur, 0, 0, dx, dy);\n    return temp.context.createPattern(temp.canvas, 'repeat');\n  }\n  return null;\n};\n\nconst drawPattern = function drawPattern(spriteName, context, ratio, img, scale, offset, shift, sx, sy, sLargeur, sHauteur, dx, dy, dLargeur, dHauteur) {\n  let pattern = null;\n  const savedPattern = getPattern.call(this, spriteName);\n  if (savedPattern) {\n    pattern = savedPattern;\n  } else {\n    pattern = createPattern(img, ratio, scale, offset, shift, sx, sy, sLargeur, sHauteur);\n    if (pattern)savePattern.call(this, spriteName, pattern);\n  }\n\n  if (pattern) {\n    context.fillStyle = pattern;\n\n    context.translate(-dLargeur / 2, -dHauteur / 2);\n    context.translate(-Math.abs(offset.left), -Math.abs(offset.top));\n    context.translate(shift.x, shift.y);\n\n    context.fillRect(-shift.x + Math.abs(offset.left), -shift.y + Math.abs(offset.top), dLargeur, dHauteur);\n\n    context.fillStyle = '#000000';\n  }\n};\n\nconst renderImages = function renderImages() {\n  /* eslint prefer-destructuring: [\"error\", {VariableDeclarator: {object: false}}] */\n  const ratio = this.canvas.ratio;\n  const context = this.context;\n  Object.values(this.$cameras).forEach((camera) => {\n    let { images } = camera.getDico();\n\n    if (images) {\n      const sortImages = (a, b) => a.destination.z - b.destination.z;\n\n      images = images.sort(sortImages);\n\n      if (camera.screen.opacity === 0) {\n        return;\n      }\n\n      images.forEach((image) => {\n        const {\n          shift, destination, frame, opacity, source, rotate, spriteName,\n        } = image;\n\n        const isVisible = camera.visible(\n\n          destination.x * camera.screen.scale(),\n          destination.y * camera.screen.scale(),\n          destination.width * camera.screen.scale(),\n          destination.height * camera.screen.scale(),\n        );\n\n        const opacityGlobal = opacity * camera.screen.opacity;\n\n        if (opacityGlobal > 0\n            && isVisible === true) {\n          const alpha = context.globalAlpha;\n\n          context.globalAlpha = opacityGlobal;\n\n          const FIELD_OF_VIEW = camera.screen.width() * 1;\n          const PROJECTION_CENTER_X = camera.screen.width() / 2; // X center of the canvas HTML\n          const PROJECTION_CENTER_Y = camera.screen.height() / 2; // Y center of the canvas HTML\n          // const sizeProjection = FIELD_OF_VIEW / (FIELD_OF_VIEW + destination.z);\n          const sizeProjection = FIELD_OF_VIEW / (FIELD_OF_VIEW + camera.position.z());\n          // const xProject = (x * sizeProjection) + PROJECTION_CENTER_X;\n          // const yProject = (y * sizeProjection) + PROJECTION_CENTER_X;\n\n          const canvas = {\n\n            destination: {\n\n              x: camera.screen.x() + destination.x * camera.screen.scale()\n            - (camera.position.x() * camera.screen.scale()\n            - camera.screen.width() / 2),\n              y: camera.screen.y() + destination.y * camera.screen.scale()\n            - (camera.position.y() * camera.screen.scale()\n            - camera.screen.height() / 2),\n              width: destination.width * camera.screen.scale(),\n              height: destination.height * camera.screen.scale(),\n            },\n          };\n\n          const offset = {\n            top: Math.min(0, canvas.destination.y - camera.screen.y()),\n            right: Math.max(0, canvas.destination.x + canvas.destination.width\n            - (camera.screen.x() + camera.screen.width())),\n            bottom: Math.max(0, canvas.destination.y + canvas.destination.height\n            - (camera.screen.y() + camera.screen.height())),\n            left: Math.min(0, canvas.destination.x - camera.screen.x()),\n          };\n\n          const dstX = canvas.destination.x - offset.left;\n          const dstY = canvas.destination.y - offset.top;\n          const dstWidth = canvas.destination.width - offset.right - Math.abs(offset.left);\n          const dstHeight = canvas.destination.height - offset.bottom - Math.abs(offset.top);\n\n          context.setTransform(ratio, 0, 0, ratio, 0, 0);\n          context.translate(dstX + (dstWidth / 2),\n            dstY + (dstHeight / 2));\n          context.rotate((rotate.z * Math.PI) / 180);\n          context.scale(1, Math.cos((rotate.x * Math.PI) / 180));\n          context.scale(Math.cos((rotate.y * Math.PI) / 180), 1);\n\n          if (destination.width === frame.width && destination.height === frame.height && shift.x === 0 && shift.y === 0) {\n            context.drawImage(\n              source,\n              frame.x - offset.left * (frame.width / canvas.destination.width),\n              frame.y - offset.top * (frame.height / canvas.destination.height),\n              frame.width - offset.right * (frame.width / canvas.destination.width)\n            - Math.abs(offset.left * (frame.width / canvas.destination.width)),\n              frame.height - offset.bottom * (frame.height / canvas.destination.height)\n            - Math.abs(offset.top * (frame.height / canvas.destination.height)),\n              -dstWidth / 2,\n              -dstHeight / 2,\n              dstWidth,\n              dstHeight,\n            );\n          } else {\n            drawPattern.call(this,\n              spriteName,\n              context,\n              ratio,\n              source,\n              camera.screen.scale(),\n              offset,\n              shift,\n              frame.x,\n              frame.y,\n              frame.width,\n              frame.height,\n              -dstWidth / 2,\n              -dstHeight / 2,\n              dstWidth,\n              dstHeight);\n          }\n          context.globalAlpha = alpha;\n        }\n      });\n    }\n  });\n\n  context.setTransform(ratio, 0, 0, ratio, 0, 0);\n};\n\nexport { renderImages };\n"],"sourceRoot":""}