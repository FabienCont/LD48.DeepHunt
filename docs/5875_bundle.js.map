{"version":3,"sources":["webpack:///./sources/game/scripts/systems/editor/showPosition.js","webpack:///./sources/theatre/modules/shape.js"],"names":["showPosition","entities","Object","entries","forEach","entity","positionComponent","get","$camera","$cameras","debug","position","Rectangle","screen","x","scale","width","y","height","context","save","lineWidth","debugVariables","$variables","$debug","focusElement","id","fillStyle","hoverElements","length","hoverLevel","selectedElements","indexOf","fillRect","restore","Point","this"],"mappings":"8OAGA,SAASA,EAAaC,GAAU,WAC9BC,OAAOC,QAAQF,GAAUG,SAAQ,YAAoB,I,IAAA,G,EAAA,E,4CAAA,I,owBAAZC,GAAY,WAE7CC,GADkBD,EAAOE,IAAI,UACTF,EAAOE,IAAI,aAE/BC,EAAU,EAAKC,SAASC,MAExBC,EAAW,IAAIC,KAEnBJ,EAAQK,OAAOC,IAAOR,EAAkBQ,EAAKN,EAAQK,OAAOE,SAAWP,EAAQG,SAASG,IAAMN,EAAQK,OAAOE,QAAUP,EAAQK,OAAOG,QAAU,GAChJR,EAAQK,OAAOI,IAAOX,EAAkBW,EAAKT,EAAQK,OAAOE,SAAWP,EAAQG,SAASM,IAAMT,EAAQK,OAAOE,QAAUP,EAAQK,OAAOK,SAAW,GACjJ,EAAIV,EAAQK,OAAOE,QACnB,EAAIP,EAAQK,OAAOE,SAMrB,EAAKI,QAAQC,OAEb,EAAKD,QAAQE,UALC,EAMd,IAAMC,EAAiB,EAAKC,WAAWC,OACnCF,EAAeG,cAAgBH,EAAeG,aAAaC,KAAOrB,EAAOqB,GAC3E,EAAKP,QAAQQ,UAAY,UAChBL,EAAeM,cAAcC,OAAS,GAC5CP,EAAeM,cAAcN,EAAeQ,aAC3CR,EAAeM,cAAcN,EAAeQ,YAAYJ,KAAOrB,EAAOqB,GAC1E,EAAKP,QAAQQ,UAAY,WACqC,IAArDL,EAAeS,iBAAiBC,QAAQ3B,GACjD,EAAKc,QAAQQ,UAAY,UAEzB,EAAKR,QAAQQ,UAAY,UAG3B,EAAKR,QAAQc,SAAStB,EAASG,EAAGH,EAASM,EAAG,EAAG,GACjD,EAAKE,QAAQe,e,2BC/BjB,SAASC,EAAMrB,EAAGG,GAEdmB,KAAKtB,EAAIA,EACTsB,KAAKnB,EAAIA,EAGb,SAASL,EAAUE,EAAGG,EAAGD,EAAOE,GAE5BkB,KAAKlB,OAASA,EACdkB,KAAKpB,MAAQA,EACboB,KAAKtB,EAAIA,EACTsB,KAAKnB,EAAIA,E","file":"5875_bundle.js","sourcesContent":["import { Rectangle } from 'modules/shape.js';\nimport { getCamera } from 'core/loadCameras';\n\nfunction showPosition(entities) {\n  Object.entries(entities).forEach(([name, entity]) => {\n    const cameraComponent = entity.get('camera');\n    const positionComponent = entity.get('position');\n\n    const $camera = this.$cameras.debug;\n\n    const position = new Rectangle(\n\n      $camera.screen.x() + (positionComponent.x) * $camera.screen.scale() - ($camera.position.x() * $camera.screen.scale() - $camera.screen.width() / 2),\n      $camera.screen.y() + (positionComponent.y) * $camera.screen.scale() - ($camera.position.y() * $camera.screen.scale() - $camera.screen.height() / 2),\n      2 * $camera.screen.scale(),\n      2 * $camera.screen.scale(),\n    );\n\n    const width = 2;\n    const offset = width / 2;\n\n    this.context.save();\n\n    this.context.lineWidth = width;\n    const debugVariables = this.$variables.$debug;\n    if (debugVariables.focusElement && debugVariables.focusElement.id === entity.id) {\n      this.context.fillStyle = '#992420';\n    } else if (debugVariables.hoverElements.length > 0\n      && debugVariables.hoverElements[debugVariables.hoverLevel]\n       && debugVariables.hoverElements[debugVariables.hoverLevel].id === entity.id) {\n      this.context.fillStyle = '#119960';\n    } else if (debugVariables.selectedElements.indexOf(entity) !== -1) {\n      this.context.fillStyle = '#992420';\n    } else {\n      this.context.fillStyle = '#A9A9A9';\n    }\n\n    this.context.fillRect(position.x, position.y, 5, 5);\n    this.context.restore();\n  });\n}\n\nexport { showPosition };\n","function Circle(x, y, radius) {\n\n    this.radius = radius;\n    this.x = x;\n    this.y = y;\n}\n\nfunction Point(x, y) {\n\n    this.x = x;\n    this.y = y;\n}\n\nfunction Rectangle(x, y, width, height) {\n\n    this.height = height;\n    this.width = width;\n    this.x = x;\n    this.y = y;\n}\n\nfunction Segment(xa, ya, xb, yb) {\n\n    this.xa = xa;\n    this.xb = xb;\n    this.ya = ya;\n    this.yb = yb;\n}\n\n// exports current module as objects\nexport {Circle, Point, Rectangle, Segment};\n"],"sourceRoot":""}