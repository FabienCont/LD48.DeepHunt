{"version":3,"sources":["webpack:///./sources/game/scripts/systems/common/images.js"],"names":["images","entities","Object","values","forEach","entity","cameraComponent","get","camera","getCamera","cameraName","imagesComponent","positionComponent","rotateComponent","rotateX","rotateY","rotateZ","x","y","z","parts","image","source","sourceImg","assets","scope","file","shift","destination","size","width","naturalWidth","height","naturalHeight","add","spriteName","rotate","frame","opacity"],"mappings":"+HAEA,SAASA,EAAOC,GAAU,WACxBC,OAAOC,OAAOF,GAAUG,SAAQ,SAACC,GAC/B,IAAMC,EAAkBD,EAAOE,IAAI,UAC7BC,EAASC,UAAe,EAAMH,EAAgBI,YAC9CC,EAAkBN,EAAOE,IAAI,UAC7BK,EAAoBP,EAAOE,IAAI,YAC/BM,EAAkBR,EAAOE,IAAI,UAE/BO,EAAU,EACVC,EAAU,EACVC,EAAU,EACVH,IACFC,EAAUD,EAAgBI,EAC1BF,EAAUF,EAAgBK,EAC1BF,EAAUH,EAAgBM,GAE5BjB,OAAOC,OAAOQ,EAAgBS,OAAOhB,SAAQ,SAACiB,GAAU,IAC9CC,EAAWD,EAAXC,OAEFC,EAAY,EAAKC,OAAOxB,OAAOsB,EAAOG,OAAOH,EAAOI,QAEpDC,EAAQN,EAAMM,OAAS,CAC3BV,EAAG,EAAGC,EAAG,GAELU,EAAcP,EAAMO,aAAe,CACvCX,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAGXU,EAAOR,EAAMQ,MAAQ,CACzBC,MAAOP,EAAUQ,aAAcC,OAAQT,EAAUU,eAGnDzB,EAAO0B,IAAI,SAAU,CACnBC,WAAY,QAAF,OAAUb,EAAOG,OAAjB,OAAyBH,EAAOI,MAC1CU,OAAQ,CACNnB,EAAGH,EACHI,EAAGH,EACHI,EAAGH,GAELM,OAAQC,EACRc,MAAO,CACLpB,EAAG,EACHC,EAAG,EACHY,MAAOP,EAAUQ,aACjBC,OAAQT,EAAUU,eAEpBN,MAAO,CACLV,EAAGU,EAAMV,EACTC,EAAGS,EAAMT,GAEXU,YAAa,CACXX,EAAIL,EAAkBK,EAAIW,EAAYX,EAAIY,EAAKC,MAAQ,EACvDZ,EAAIN,EAAkBM,EAAIU,EAAYV,EAAIW,EAAKG,OAAS,EACxDb,EAAGP,EAAkBO,EAAIS,EAAYT,EACrCW,MAAQD,EAAKC,MACbE,OAASH,EAAKG,QAEhBM,QAAShC,EAAgBgC,QAAUjB,EAAMiB","file":"1372_bundle.js","sourcesContent":["import { getCamera } from 'core/loadCameras';\n\nfunction images(entities) {\n  Object.values(entities).forEach((entity) => {\n    const cameraComponent = entity.get('camera');\n    const camera = getCamera.call(this, cameraComponent.cameraName);\n    const imagesComponent = entity.get('images');\n    const positionComponent = entity.get('position');\n    const rotateComponent = entity.get('rotate');\n\n    let rotateX = 0;\n    let rotateY = 0;\n    let rotateZ = 0;\n    if (rotateComponent) {\n      rotateX = rotateComponent.x;\n      rotateY = rotateComponent.y;\n      rotateZ = rotateComponent.z;\n    }\n    Object.values(imagesComponent.parts).forEach((image) => {\n      const { source } = image;\n\n      const sourceImg = this.assets.images[source.scope][source.file]();\n\n      const shift = image.shift || {\n        x: 0, y: 0,\n      };\n      const destination = image.destination || {\n        x: 0, y: 0, z: 0,\n      };\n\n      const size = image.size || {\n        width: sourceImg.naturalWidth, height: sourceImg.naturalHeight,\n      };\n\n      camera.add('images', {\n        spriteName: `_img_${source.scope}${source.file}`,\n        rotate: {\n          x: rotateX,\n          y: rotateY,\n          z: rotateZ,\n        },\n        source: sourceImg,\n        frame: {\n          x: 0,\n          y: 0,\n          width: sourceImg.naturalWidth,\n          height: sourceImg.naturalHeight,\n        },\n        shift: {\n          x: shift.x,\n          y: shift.y,\n        },\n        destination: {\n          x: (positionComponent.x + destination.x - size.width / 2),\n          y: (positionComponent.y + destination.y - size.height / 2),\n          z: positionComponent.z + destination.z,\n          width: (size.width),\n          height: (size.height),\n        },\n        opacity: cameraComponent.opacity * image.opacity,\n      });\n    });\n  });\n}\n\nexport { images };\n"],"sourceRoot":""}