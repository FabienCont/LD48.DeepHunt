{"version":3,"sources":["webpack:///./sources/game/scripts/systems/demo/generateDecor.js"],"names":["generateDecor","entities","birdPosition","Object","values","this","$world","find","entity","name","get","maxPosBeyondBird","x","minPosition","entitiesName","$variables","started","push","decorEntities","i","length","model","models","demo","width","distanceBetween","maxPosition","maxId","defaultY","cloud","pipeTop","pipeBottom","bottom","top","entries","filter","id","entityName","isOut","y","remove","checkpoint","maxPosPipe","forEach","entityInfo","newEntity","generateEntities","otherPipeName","otherPipeInfo","randomHeight","Math","random","randomizePipeInfo","newOtherPipe","add","height","heightMax","pipeName","newParts","sizeShadowPipe","size","defaultValue","animation","frame","elapsed","framerate","opacity","spriteEnd","direction","pipeHeight","heightShadow","source","destination","z","hitbox","heightMidPart","offsetMinPosition","sprite","parts"],"mappings":"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","file":"7008_bundle.js","sourcesContent":["import { generateEntities } from 'core/loadEntities';\n\nfunction generateDecor(entities) {\n  const birdEntity = Object.values(this.$world.entities).find((entity) => entity.name === 'character');\n  const birdPosition = birdEntity.get('position');\n  const maxPosBeyondBird = birdPosition.x + 128;\n  const minPosition = birdPosition.x - 32;\n  const entitiesName = [\n    'top',\n    'bottom',\n    'water',\n    'pipeTop',\n    'pipeBottom',\n    'cloud'];\n\n  if (this.$variables.started) {\n    entitiesName.push('checkpoint');\n  }\n\n  const decorEntities = {};\n  for (let i = 0; i < entitiesName.length; i += 1) {\n    const name = entitiesName[i];\n    decorEntities[name] = {\n      model: this.models.entities.demo[name], width: 64, distanceBetween: 64, maxPosition: minPosition, maxId: '', entities: [], defaultY: 0,\n    };\n  }\n\n  decorEntities.cloud.width = 160;\n  decorEntities.cloud.distanceBetween = 160;\n  decorEntities.pipeTop.width = 8;\n  decorEntities.pipeBottom.width = 8;\n  decorEntities.bottom.width = 32;\n  decorEntities.top.width = 32;\n\n  Object.entries(entities).filter(([id, entity]) => {\n    const entityName = entity.name;\n    const isOut = (entity.get('position').x + decorEntities[entityName].width) < minPosition;\n    if (isOut) {\n      decorEntities[entityName].defaultY = entity.get('position').y;\n      this.$world.remove(entity);\n    } else {\n      decorEntities[entityName].entities.push(entity);\n      if (decorEntities[entityName].maxPosition < (entity.get('position').x)) {\n        decorEntities[entityName].maxPosition = entity.get('position').x;\n        decorEntities[entityName].maxId = id;\n        decorEntities[entityName].defaultY = entity.get('position').y;\n      }\n    }\n    return !isOut;\n  });\n\n  if (this.$variables.started && decorEntities.checkpoint.entities.length === 0) {\n    const maxPosPipe = decorEntities.pipeTop.maxPosition;\n    decorEntities.checkpoint.maxPosition = maxPosPipe;\n  }\n\n  const randomHeightDico = {};\n  Object.entries(decorEntities).forEach(([name, entityInfo]) => {\n    while (maxPosBeyondBird > entityInfo.maxPosition) {\n      const newEntities = generateEntities.call(this, [entityInfo.model()]);\n      let newEntity = newEntities[0];\n      newEntity.get('position').y = entityInfo.defaultY;\n      if (this.$variables.started && (name === 'pipeTop' || name === 'pipeBottom')) {\n        const otherPipeName = name === 'pipeTop' ? 'pipeBottom' : 'pipeTop';\n        const otherPipeInfo = decorEntities[otherPipeName];\n        const heightMax = 40;\n        const randomHeight = Math.random() * (heightMax - 0) + 0;\n        newEntity = randomizePipeInfo(newEntity, randomHeight, heightMax, name);\n        let newOtherPipe = generateEntities.call(this, [otherPipeInfo.model()])[0];\n        newOtherPipe = randomizePipeInfo(newOtherPipe, randomHeight, heightMax, otherPipeName);\n        newOtherPipe.get('position').y = otherPipeInfo.defaultY;\n        newOtherPipe.get('position').x = otherPipeInfo.maxPosition + otherPipeInfo.distanceBetween;\n        this.$world.add(newOtherPipe);\n        otherPipeInfo.maxPosition += entityInfo.distanceBetween;\n        otherPipeInfo.maxId = newOtherPipe.id;\n      }\n      newEntity.get('position').x = entityInfo.maxPosition + entityInfo.distanceBetween;\n      this.$world.add(newEntity);\n      entityInfo.maxPosition = newEntity.get('position').x;\n      entityInfo.maxId = newEntity.id;\n    }\n  });\n}\n\nconst randomizePipeInfo = function randomizePipeInfo(newEntity, height, heightMax, pipeName) {\n  const newParts = [];\n  const sizeShadowPipe = { size: { width: 16, height: 12 } };\n  const sizePipe = { size: { width: 16, height: 16 } };\n  const defaultValue = {\n    animation: {\n      frame: 0,\n      elapsed: 0,\n      framerate: 8,\n    },\n    opacity: 1,\n  };\n\n  let spriteEnd = 'pipe_top';\n  let direction = 1;\n  let pipeHeight = height;\n\n  if (pipeName === 'pipeBottom') {\n    spriteEnd = 'pipe_bottom';\n    direction = -1;\n    pipeHeight = heightMax - height;\n    const maxHeightShadow = 12;\n    const minHeightShadow = 0;\n    const heightPercent = 1 - (height / heightMax);\n    const heightShadow = heightPercent * ((maxHeightShadow - minHeightShadow) + minHeightShadow);\n    if (heightShadow <= 2) {\n      newParts[0] = {\n        source: 'pipe_shadow_top',\n        destination: { x: 0, y: 6 + heightShadow, z: 0 },\n        ...sizeShadowPipe,\n        ...defaultValue,\n      };\n    } else {\n      newParts[0] = {\n        source: 'pipe_shadow_bottom',\n        destination: { x: 0, y: 6 + heightShadow, z: 0 },\n        ...sizeShadowPipe,\n        ...defaultValue,\n      };\n\n      newParts[1] = {\n        source: 'pipe_shadow_top',\n        destination: { x: 0, y: 18 + heightShadow, z: 0 },\n        ...sizeShadowPipe,\n        ...defaultValue,\n      };\n    }\n  }\n\n  const hitbox = newEntity.get('hitbox');\n  hitbox.height = pipeHeight;\n  hitbox.y = (pipeHeight / 2) * direction;\n  let heightMidPart = 0;\n\n  const offsetMinPosition = -5 * direction;\n  const maxPosWithoutPipeMid = 4 * direction;\n\n  if (pipeHeight > 9) {\n    heightMidPart = (pipeHeight);\n    newParts[2] = {\n      source: 'pipe_mid',\n      destination: { x: 0, y: offsetMinPosition + ((heightMidPart / 2) * direction), z: 0 },\n      size: {\n        width: 16,\n        height: heightMidPart,\n      },\n      ...defaultValue,\n    };\n  }\n\n  newParts[3] = {\n    source: spriteEnd,\n    destination: { x: 0, y: offsetMinPosition + (pipeHeight * direction), z: 10 },\n    ...sizePipe,\n    ...defaultValue,\n  };\n\n  let sprite = newEntity.get('sprites');\n  if (!sprite)sprite = newEntity.get('images');\n  sprite.parts = newParts;\n\n  return newEntity;\n};\n\nexport { generateDecor };\n"],"sourceRoot":""}