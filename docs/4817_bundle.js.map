{"version":3,"sources":["webpack:///./sources/game/scripts/systems/editor/generateSceneElements.js"],"names":["generateSceneElements","sceneFiles","this","params","sceneInfo","JSON","stringify","$variables","$debug","savedSceneInfo","variables","cameras","entities","Object","values","forEach","file","name","split","content","debug","generateVariables","$world","loadWorld","generateCameras","sceneEntities","generateEntities","add","entries","i","index","err","console","error"],"mappings":"sRAKA,SAASA,IAAwB,IACvBC,EAAeC,KAAKC,OAApBF,WACFG,EAAYC,KAAKC,UAAUL,GAEjC,GAAIC,KAAKK,WAAWC,OAAOC,iBAAmBL,GAA2B,SAAdA,EAAsB,CAC/E,IAAiBM,EAAeC,EAAaC,EAkB7C,GAjBAC,OAAOC,OAAOb,GAAYc,SAAQ,SAACC,GACjC,IAAMC,EAAOD,EAAKC,KAAKC,MAAM,KAAK,GACrB,cAATD,EACFP,EAAYM,EAAKG,QACC,YAATF,EACTN,EAAUK,EAAKG,QACG,aAATF,EACTL,EAAWI,EAAKG,SACE,cAATF,GAES,YAATA,GAES,WAATA,IAHGD,EAAKG,WAQjBT,EAAW,CACb,IAAMU,EAAQlB,KAAKK,WAAWC,OAC9BN,KAAKK,WAAac,SAAuBnB,KAAMQ,GAC/CR,KAAKK,WAAWC,OAASY,EAS3B,GANAlB,KAAKoB,OAASC,SAAerB,MAEzBS,IACFT,KAAKK,WAAWC,OAAOG,QAAUa,UAAqBtB,KAAMS,IAG1DC,EACF,IACE,IAAMa,EAAgBC,UAAsBxB,KAAMU,GAClDV,KAAKoB,OAAOK,IAAIF,GAChBZ,OAAOe,QAAQ1B,KAAKoB,OAAOV,UAAUG,SAAQ,WAAec,GAAM,M,s0BAAA,gBAC1DC,MAAQD,KAEhB,MAAOE,GACPC,QAAQC,MAAMF,GAIlB7B,KAAKK,WAAWC,OAAOC,eAAiBL","file":"4817_bundle.js","sourcesContent":["import { generateEntities } from 'core/loadEntities';\nimport { generateCameras } from 'core/loadCameras';\nimport { generateVariables } from 'core/loadVariables';\nimport { loadWorld } from 'core/loadWorld';\n\nfunction generateSceneElements() {\n  const { sceneFiles } = this.params;\n  const sceneInfo = JSON.stringify(sceneFiles);\n\n  if (this.$variables.$debug.savedSceneInfo !== sceneInfo && sceneInfo !== 'null') {\n    let systems; let variables; let cameras; let entities; let renderers; let inputs;\n    Object.values(sceneFiles).forEach((file) => {\n      const name = file.name.split('.')[0];\n      if (name === 'variables') {\n        variables = file.content;\n      } else if (name === 'cameras') {\n        cameras = file.content;\n      } else if (name === 'entities') {\n        entities = file.content;\n      } else if (name === 'renderers') {\n        renderers = file.content;\n      } else if (name === 'systems') {\n        systems = file.content;\n      } else if (name === 'inputs') {\n        inputs = file.content;\n      }\n    });\n\n    if (variables) {\n      const debug = this.$variables.$debug;\n      this.$variables = generateVariables.call(this, variables);\n      this.$variables.$debug = debug;\n    }\n\n    this.$world = loadWorld.call(this);\n\n    if (cameras) {\n      this.$variables.$debug.cameras = generateCameras.call(this, cameras);\n    }\n\n    if (entities) {\n      try {\n        const sceneEntities = generateEntities.call(this, entities);\n        this.$world.add(sceneEntities);\n        Object.entries(this.$world.entities).forEach(([key, value], i) => {\n          value.index = i;\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    this.$variables.$debug.savedSceneInfo = sceneInfo;\n  }\n}\nexport { generateSceneElements };\n"],"sourceRoot":""}