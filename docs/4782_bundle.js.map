{"version":3,"sources":["webpack:///./sources/game/scripts/systems/demo/updateScore.js"],"names":["updateScore","entities","Object","entries","forEach","entity","parts","get","score","$variables","isBestScore","name","bestScore","alias","numberStr","values","part","i","findNumber","parseInt","newParts","scoreStr","toString","length","createNumberSpritePart","sprites","scope","params","newSprites","createComponentFromModel","add","source","split","number","index","destination","x","y","z","size","width","height"],"mappings":"8OAEA,SAASA,EAAYC,GAAU,WAC7BC,OAAOC,QAAQF,GAAUG,SAAQ,YAAkB,M,s0BAAA,MAAZC,GAAY,WACzCC,EAAUD,EAAOE,IAAI,WAArBD,MACFE,EAAU,EAAKC,WAAfD,MACAE,EAA+B,cAAhBL,EAAOM,KACxBD,IACFF,EAAQ,EAAKC,WAAWG,WAI1B,IAAMC,EAAQH,EAAc,cAAgB,SACxCI,EAAY,GAKhB,GAJAZ,OAAOa,OAAOT,GAAOF,SAAQ,SAACY,EAAMC,GAClCH,GAAaI,EAAWF,EAAKH,MAG3BM,SAASL,IAAcN,EAAO,CAIhC,IAHA,IAAMY,EAAW,GAEXC,GADNb,EAASA,QAAwCA,EAAQ,GAClCc,WACdL,EAAI,EAAGA,EAAII,EAASE,OAAQN,IAAK,CACxC,IAAMD,EAAOQ,EAAuBL,SAASE,EAASJ,IAAKA,EAAGI,EAASE,OAAQV,GAC/EO,EAASH,GAAGD,EAGd,IAAMS,EAAU,CACdd,KAAM,UACNe,MAAO,SACPC,OAAQ,CACNrB,MAAOc,IAILQ,EAAaC,UAA8B,EAAMJ,GACvDpB,EAAOyB,IAAIF,OAKjB,IAAMV,EAAa,SAAUF,EAAKH,GAChC,OAAOG,EAAKe,OAAOC,MAAMnB,GAAO,IAG5BW,EAAyB,SAAUS,EAAQC,EAAOX,EAAQV,GAG9D,MAAO,CACLkB,OAFUlB,EAAM,IAAIoB,EAGpBE,YAAa,CAACC,EAJoB,GAAbF,EAAQ,GAAW,EAAIX,EAIdc,EAAE,EAAGC,EAAE,GACrCC,KAAK,CAAEC,MAAM,EAAEC,OAAQ","file":"4782_bundle.js","sourcesContent":["import { createComponentFromModel } from 'core/loadEntities.js';\n\nfunction updateScore(entities) {\n  Object.entries(entities).forEach(([id, entity]) => {\n    const { parts } = entity.get('sprites');\n    let { score } = this.$variables;\n    const isBestScore = (entity.name === 'bestScore');\n    if (isBestScore) {\n      score = this.$variables.bestScore;\n    }\n    \n    \n    const alias = isBestScore ? 'number-blue' : 'number';\n    let numberStr = '';\n    Object.values(parts).forEach((part, i) => {\n      numberStr += findNumber(part,alias);\n    });\n\n    if (parseInt(numberStr) != score) {\n      const newParts = {};\n      score = (score !== undefined && score !== null ? score : 0);\n      const scoreStr = score.toString();\n      for (let i = 0; i < scoreStr.length; i++) {\n        const part = createNumberSpritePart(parseInt(scoreStr[i]), i, scoreStr.length, alias);\n        newParts[i]=part;\n      }\n\n      const sprites = {\n        name: 'sprites',\n        scope: 'common',\n        params: {\n          parts: newParts,\n        },\n      };\n\n      const newSprites = createComponentFromModel.call(this, sprites);\n      entity.add(newSprites);\n    }\n  });\n}\n\nconst findNumber = function (part,alias) {\n  return part.source.split(alias)[1];\n};\n\nconst createNumberSpritePart = function (number, index, length, alias) {\n  const destinationX = ((index + 1) * 8) - (8 * length);\n  const name =alias+'_'+number;\n  return {\n    source: name,\n    destination: {x:destinationX, y:0, z:0},\n    size:{ width:8,height: 16}\n  };\n};\n\nexport { updateScore };\n"],"sourceRoot":""}