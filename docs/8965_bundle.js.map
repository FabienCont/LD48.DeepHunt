{"version":3,"sources":["webpack:///./sources/game/scripts/snippets/aJam/handle-hitbox-ennemy.js"],"names":["collisionsSorter","collisionA","collisionB","nbDirectionA","minA","Infinity","nbDirectionB","minB","Object","values","delta","map","i","entity","collides","bottom","top","left","right","states","get","sort","forEach","from","entry","collision","entityB","entries","find","parts","discover","hided","scripts","snippets","call","this"],"mappings":"oiCAAA,IAOMA,EAAmB,cAA4D,aAAjDC,EAAiD,qBAAxBC,EAAwB,KAC/EC,GAD+E,KAChE,GACfC,EAAOC,IAEPC,EAAe,EACfC,EAAOF,IAiBX,OAhBAG,OAAOC,OAAOR,EAAWS,OAAOC,KAAI,SAACF,EAAQG,GACvCH,EAAS,IACXN,GAAgB,EACZM,EAASL,IACXA,EAAOK,OAIbD,OAAOC,OAAOP,EAAWQ,OAAOC,KAAI,SAACF,EAAQG,GACvCH,EAAS,IACXH,GAAgB,EACZG,EAASF,IACXA,EAAOE,OAITL,EAAOG,GAASH,IAASG,GAAQJ,EAAeG,GAC1C,EACJC,EAAOH,GAASA,IAASG,GAAQD,EAAeH,EAC7C,EAEF,GAGM,SAAS,EAACU,EAAQC,GAAU,WACnCJ,EAAQ,CACZK,OAAQ,EAAGC,IAAK,EAAGC,KAAM,EAAGC,MAAO,GAGjCC,EAASN,EAAOO,IAAI,UAExBN,EAASO,KAAKrB,GAAkBsB,SAAQ,WAAuBV,GAAM,IA5CvCW,EACxBC,EA2C+D,SAA3BC,EAA2B,KAAhBC,EAAgB,KA5CvCH,EA6CXE,EAATF,MA5CJC,EAAQhB,OAAOmB,QAAQJ,GAAMK,MAAK,sCAA4B,IAA5B,UAE/BJ,EAAM,IA4CTE,EAAQN,IAAI,WAAWS,MAAMC,UAAYX,GAAUA,EAAOV,QAAkC,UAAxBU,EAAOV,OAAOsB,QAEpF,EAAKC,QAAQC,SAAb,iBAA6CC,KAAK,EAAMrB,GACxD,EAAKmB,QAAQC,SAAb,uBAAmDC,KAAK,EAAMR,IAE3DD,EAAUf,MAAMK,OAAS,GAAKL,EAAMK,OAASU,EAAUf,MAAMK,SAChEL,EAAMK,QAAUU,EAAUf,MAAMK,OAASL,EAAMK,QAE5CU,EAAUf,MAAMM,IAAM,GAAKN,EAAMM,IAAMS,EAAUf,MAAMM,MAC1DN,EAAMM,KAAOS,EAAUf,MAAMM,IAAMN,EAAMM,KAEtCS,EAAUf,MAAMO,KAAO,GAAKP,EAAMO,KAAOQ,EAAUf,MAAMO,OAC5DP,EAAMO,MAAQQ,EAAUf,MAAMO,KAAOP,EAAMO,MAEzCQ,EAAUf,MAAMQ,MAAQ,GAAKR,EAAMQ,MAAQO,EAAUf,MAAMQ,QAC7DR,EAAMQ,OAASO,EAAUf,MAAMQ,MAAQR,EAAMQ,UAK7CR,EAAMO,MAELE,GAAUA,EAAOV,QAAkC,UAAxBU,EAAOV,OAAOsB,OAC1CI,KAAKH,QAAQC,SAAb,sBAAkDC,KAAKC,KAAMtB,GAG7DH,EAAMQ,OAELC,GAAUA,EAAOV,QAAkC,UAAxBU,EAAOV,OAAOsB,OAC1CI,KAAKH,QAAQC,SAAb,qBAAiDC,KAAKC,KAAMtB","file":"8965_bundle.js","sourcesContent":["const findDirection = function (from) {\n  const entry = Object.entries(from).find(([key, value]) => value === true);\n  if (entry) {\n    return entry[0];\n  } // debugger;\n};\n\nconst collisionsSorter = function ([collisionA, colliderA], [collisionB, colliderB]) {\n  let nbDirectionA = 0;\n  let minA = Infinity;\n\n  let nbDirectionB = 0;\n  let minB = Infinity;\n  Object.values(collisionA.delta).map((values, i) => {\n    if (values > 0) {\n      nbDirectionA += 1;\n      if (values < minA) {\n        minA = values;\n      }\n    }\n  });\n  Object.values(collisionB.delta).map((values, i) => {\n    if (values > 0) {\n      nbDirectionB += 1;\n      if (values < minB) {\n        minB = values;\n      }\n    }\n  });\n  if (minA < minB || (minA === minB && nbDirectionA < nbDirectionB)) {\n    return -1;\n  } if (minB < minA || (minA === minB && nbDirectionB < nbDirectionA)) {\n    return 1;\n  }\n  return 0;\n};\n\nexport default function (entity, collides) {\n  const delta = {\n    bottom: 0, top: 0, left: 0, right: 0,\n  };\n\n  let states = entity.get('states')\n\n  collides.sort(collisionsSorter).forEach(([collision, entityB], i) => {\n    const { from } = collision;\n    const direction = findDirection(from);\n    if(!entityB.get('sprites').parts.discover && states && states.values && states.values.hided === \"false\"  ){\n\n      this.scripts.snippets['aJam']['soundChocko'].call(this, entity);\n      this.scripts.snippets['aJam']['ennemySetDiscover'].call(this, entityB);\n    }\n    if ( collision.delta.bottom > 0 && delta.bottom < collision.delta.bottom) {\n      delta.bottom += collision.delta.bottom - delta.bottom;\n    }\n    if ( collision.delta.top > 0 && delta.top < collision.delta.top) {\n      delta.top += collision.delta.top - delta.top;\n    }\n     if (collision.delta.left > 0 && delta.left < collision.delta.left) {\n      delta.left += collision.delta.left - delta.left;\n    }\n    if (collision.delta.right > 0 && delta.right < collision.delta.right) {\n      delta.right += collision.delta.right - delta.right;\n    }\n  });\n\n\n  if (delta.left) {\n\n    if(states && states.values && states.values.hided === \"false\" ){\n      this.scripts.snippets['aJam']['persoEscapeRight'].call(this, entity);\n    }\n  }\n  if (delta.right) {\n\n    if(states && states.values && states.values.hided === \"false\"){\n      this.scripts.snippets['aJam']['persoEscapeLeft'].call(this, entity);\n    }\n  }\n}\n"],"sourceRoot":""}